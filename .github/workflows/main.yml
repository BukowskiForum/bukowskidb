# Build Bukowski Database & Deploy via SSH
name: Build Bukowski Database & Deploy via SSH
# this bad boy is too big to host on GitHub Pages, cloudflare, or any free service,so we're deploying to our own server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      TARGET_DIR:   ${{ secrets.TARGET_DIR }}
      TARGET_OWNER: ${{ secrets.TARGET_OWNER }}

    steps:
      # 1) Checkout source
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Prepare Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3) (optional) Cache pip packages to speed-up subsequent runs
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install MkDocs & plugins
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 5) Build the static site
      - name: Build bukowski database
        run: mkdocs build --clean        # output ends up in ./site

      # 6) Create a tar.gz archive of the build
      - name: Compress artefact
        run: |
          tar -czf bukowski_database.tar.gz -C site .

      ####################################################################
      #  SSH section – copy archive & unpack remotely
      ####################################################################

      # 7) Start ssh-agent with the private key stored in Secrets
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.BUKOWSKIFORUM_SSH_KEY }}

      # 8) (optional) Pre-accept host key to avoid the prompt
      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.BUKOWSKIFORUM_HOST }} >> ~/.ssh/known_hosts

      # 9) Copy the archive over
      - name: Copy archive via scp
        run: |
          scp -o StrictHostKeyChecking=no bukowski_database.tar.gz \
              ${{ secrets.BUKOWSKIFORUM_USER }}@${{ secrets.BUKOWSKIFORUM_HOST }}:/tmp/

      # 10) Run remote commands: unpack, chown, atomic swap
      - name: Extract and swap on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host:      ${{ secrets.BUKOWSKIFORUM_HOST }}
          username:  ${{ secrets.BUKOWSKIFORUM_USER }}
          key:       ${{ secrets.BUKOWSKIFORUM_SSH_KEY }}
          port: 22

          script: |
            set -e
            # Use GitHub Actions expression syntax to embed env vars directly
            # Note: Ensure TARGET_DIR and TARGET_OWNER are defined in the top-level 'env:' block
            TARGET_DIR_REMOTE="${{ env.TARGET_DIR }}"
            TARGET_OWNER_REMOTE="${{ env.TARGET_OWNER }}"

            # Check if variables are empty (optional but good practice)
            if [ -z "$TARGET_DIR_REMOTE" ] || [ -z "$TARGET_OWNER_REMOTE" ]; then
              echo "Error: TARGET_DIR or TARGET_OWNER is empty." >&2
              exit 1
            fi

            echo "Deploying to $TARGET_DIR_REMOTE"

            # Use the variables defined above
            sudo rm -rf "${TARGET_DIR_REMOTE}.new"
            sudo mkdir -p "${TARGET_DIR_REMOTE}.new"
            sudo tar -xzf /tmp/bukowski_database.tar.gz -C "${TARGET_DIR_REMOTE}.new"
            sudo chown -R "${TARGET_OWNER_REMOTE}" "${TARGET_DIR_REMOTE}.new"

            if [ -d "${TARGET_DIR_REMOTE}" ]; then
              sudo mv "${TARGET_DIR_REMOTE}" "${TARGET_DIR_REMOTE}.old"
            fi
            sudo mv "${TARGET_DIR_REMOTE}.new" "${TARGET_DIR_REMOTE}"

            sudo rm -rf "${TARGET_DIR_REMOTE}.old"
            sudo rm -f  /tmp/bukowski_database.tar.gz

            echo "✅  Deploy complete"

      # 11) Purge Cloudflare cache
      - name: Purge Cloudflare cache
        # Only run if the previous steps were successful
        if: success()
        uses: cloudflare/purge-cache-action@v1
        with:
          # Use the secrets created earlier
          token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE_ID }}